@page "/graficos"
@using System.Net.Http
@using System.Text.Json.Serialization
@inject HttpClient http
@inject NavigationManager navigation

@if (buscado)
{
    <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="volver" Icon="arrow_back" Disabled=@deshabilitado />
    <br />
    <br />
}

<div class="rz-p-12 rz-text-align-center">
    <RadzenRadioButtonList @bind-Value=@info TValue="int" class="mb-5">
        <Items>
            <RadzenRadioButtonListItem Text="Puntos" Value="1" />
            <RadzenRadioButtonListItem Text="Asistencias" Value="2" />
            <RadzenRadioButtonListItem Text="Rebotes" Value="3" />
            <RadzenRadioButtonListItem Text="Rebotes Defensivos" Value="13" />
            <RadzenRadioButtonListItem Text="Rebotes Ofensivos" Value="14" />
            <RadzenRadioButtonListItem Text="Robos" Value="4" />
            <RadzenRadioButtonListItem Text="Tapones" Value="5" />
            <RadzenRadioButtonListItem Text="Tiros de Campo Intentados" Value="6" />
            <RadzenRadioButtonListItem Text="Tiros Libres Intentados" Value="7" />
            <RadzenRadioButtonListItem Text="Tiros de 3 Intentados" Value="8" />
            <RadzenRadioButtonListItem Text="Tiros de Campo Anotados" Value="9" />
            <RadzenRadioButtonListItem Text="Tiros Libres Anotados" Value="10" />
            <RadzenRadioButtonListItem Text="Tiros de 3 Anotados" Value="11" />
            <RadzenRadioButtonListItem Text="Faltas" Value="12" />
        </Items>
    </RadzenRadioButtonList>
</div>

<div style="display: flex;align-items: center">
    <div style="width:40%">
        <h4>Primer Jugador</h4>
    </div>
    <div style="width:20%"/>
    <div style="width:40%">
        <h4>Segundo Jugador</h4>
    </div>
</div>
<div style="display: flex;align-items: center">
    <div style="width:40%">
        <RadzenTextBox Placeholder="Buscar..." @bind-Value=@value1 Change="buscar" class="w-100" />
    </div>
    <div style="width:20%"/>
    <div style="width:40%">
        <RadzenTextBox Placeholder="Buscar..." @bind-Value=@value2 Change="buscar2" class="w-100" />
    </div>
</div>
<br />

<div style="display: flex;align-items: center">

    <div style="width:40%">
        @if (jugadores2 != null && !error1)
        {
            <select @onchange="OnSelect">
                <option disabled selected value> -- eligue un equipo -- </option>
                @for(int i = 0; i < jugadores2.data.Length; i++)
                {
                    <option value="@jugadores2.data[i].id">@jugadores2.data[i].first_name  @jugadores2.data[i].last_name</option>
                }
            </select>
        }
    </div>
    <div style="width:20%; text-align:center">
        @if (elegido1 && elegido2)
        {
            <RadzenButton Click="search" Icon="search" />
        }
    </div>

    <div style="width:40%">
        @if (jugadores4 != null && !error2)
        {
            <select @onchange="OnSelect1">
                <option disabled selected value> -- eligue un equipo -- </option>
                @for (int i = 0; i < jugadores4.data.Length; i++)
                {
                    <option value="@jugadores4.data[i].id">@jugadores4.data[i].first_name  @jugadores4.data[i].last_name</option>
                }
            </select>
        }
    </div>

</div>

@if (error1 || error2 || error1Datos || error2Datos)
{
    <div style="display: flex;align-items: center">
        <div style="width:40%">
            @if (error1 || error1Datos)
            {
                <p style="color:red"><b>@error1String</b></p>
            }
        </div>
        <div style="width:20%">
        </div>
        <div style="width:40%">
            @if (error2 || error2Datos)
            {
                <p style="color:red"><b>@error2String</b></p>
            }
        </div>
    </div>
}


@if (terminado)
{
    <RadzenChart>
        <RadzenLineSeries Smooth="true" Data="@jugador1Info" CategoryProperty="Partido" Title="@getNombre(1)" ValueProperty="Data">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
        <RadzenLineSeries Smooth="true" Data="@jugador2Info" CategoryProperty="Partido" Title="@getNombre(2)" ValueProperty="Data">
            <RadzenMarkers MarkerType="MarkerType.Circle" />
        </RadzenLineSeries>
    </RadzenChart>
}

@code {
    JugadorUnico jugador1;
    JugadorUnico jugador2;
    Jugador jugadores;
    Jugador jugadores2;
    Jugador jugadores3;
    Jugador jugadores4;
    bool deshabilitado = false;
    bool error1 = false;
    bool error2 = false;
    bool error1Datos = false;
    bool error2Datos = false;
    bool buscado = false;
    string value1 = "";
    string value2 = "";
    bool elegido1 = false;
    bool elegido2 = false;
    int idJugador1 = -1;
    int idJugador2 = -1;
    Estadisticas estadisticas1;
    Estadisticas estadisticas2;
    Estadisticas statsVacia;
    DataItem[] jugador1Info;
    DataItem[] jugador2Info;
    // Para saber que tipo de rafico quieren
    int info = 1;
    bool terminado = false;
    string error1String;
    string error2String;

    class DataItem
    {
        public int Partido { get; set; }
        public int Data { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        statsVacia = await http.GetFromJsonAsync<Estadisticas>($"https://balldontlie.io/api/v1/stats?per_page=100&seasons[]=2022&player_ids[]=14");
    }
    private async Task buscar()
    {
        deshabilitado = true;
        if (value1.Length < 2)
        {
            error1 = true;
            error1String = errores(1);
            jugadores = null;
            jugadores2 = jugadores;
            deshabilitado = false;
            elegido1 = false;
            terminado = false;
        }
        else
        {
            error1 = false;
            error1Datos = false;
            jugadores = null;
            jugadores2 = null;
            jugadores = await http.GetFromJsonAsync<Jugador>($"https://www.balldontlie.io/api/v1/players?per_page=100&search={value1}");
            jugadores2 = jugadores;
            deshabilitado = false;
            buscado = true;
            elegido1 = false;
            terminado = false;
        }
    }

    private async Task buscar2()
    {
        deshabilitado = true;
        if (value2.Length < 2)
        {
            error2 = true;
            error2String = errores(1);
            jugadores3 = null;
            jugadores4 = jugadores;
            deshabilitado = false;
            elegido2 = false;
            terminado = false;
        }
        else
        {
            error2 = false;
            error2Datos = false;
            jugadores3 = null;
            jugadores4 = null;
            jugadores3 = await http.GetFromJsonAsync<Jugador>($"https://www.balldontlie.io/api/v1/players?per_page=100&search={value2}");
            jugadores4 = jugadores3;
            deshabilitado = false;
            buscado = true;
            elegido2 = false;
            terminado = false;
        }
    }

    private async Task volver()
    {
        deshabilitado = true;
        jugadores = null;
        jugadores2 = null;
        jugadores3 = null;
        jugadores4 = null;
        deshabilitado = false;
        value1 = "";
        value2 = "";
        buscado = false;
        elegido1 = false;
        elegido2 = false;
        terminado = false;
        error1 = false;
        error2 = false;
        error1Datos = false;
        error2Datos = false;
    }

    private async Task OnSelect(ChangeEventArgs e)
    {
        elegido1 = false;
        idJugador1 = Int32.Parse(e.Value.ToString());
        elegido1 = true;
        error1Datos = false;
        terminado = false;
    }

    private async Task OnSelect1(ChangeEventArgs e)
    {
        elegido2 = false;
        idJugador2 = Int32.Parse(e.Value.ToString());
        elegido2 = true;
        error2Datos = false;
        terminado = false;
    }

    private async Task search()
    {
        await getJugadores(idJugador1, idJugador2);

        terminado = false;
        estadisticas1 = await http.GetFromJsonAsync<Estadisticas>($"https://www.balldontlie.io/api/v1/stats?per_page=100&seasons[]=2022&player_ids[]={idJugador1}");
        @if (estadisticas1 == null || estadisticas1.data.Equals(statsVacia.data))
        {
            error1Datos = true;
            error1String = errores(2);
            elegido1 = false;
        }
        else
        {
            jugador1Info = new DataItem[estadisticas1.meta.total_count];
            inicializar(1);

            if (estadisticas1.meta.total_pages > 1)
            {
                for (int z = 1; z < estadisticas1.meta.total_pages; z++)
                {
                    if (z != 1)
                    {
                        estadisticas1 = await http.GetFromJsonAsync<Estadisticas>($"https://www.balldontlie.io/api/v1/stats?per_page=100&page={z}&seasons[]=2022&player_ids[]={idJugador1}");
                    }
                    int j;
                    for (int i = 0; i < estadisticas1.data.Length; i++)
                    {
                        j = (z * 100 - 100) + i + 1;
                        jugador1Info[i].Partido = j;
                        switch (info)
                        {
                            case 1:
                                // Puntos
                                jugador1Info[i].Data = estadisticas1.data[i].pts;
                                break;
                            case 2:
                                // Asistencias
                                jugador1Info[i].Data = estadisticas1.data[i].ast;
                                break;
                            case 3:
                                // Rebotes
                                jugador1Info[i].Data = estadisticas1.data[i].reb;
                                break;
                            case 4:
                                // Robos
                                jugador1Info[i].Data = estadisticas1.data[i].stl;
                                break;
                            case 5:
                                // Tapones
                                jugador1Info[i].Data = estadisticas1.data[i].blk;
                                break;
                            case 6:
                                // Tiros de campo Intentados
                                jugador1Info[i].Data = estadisticas1.data[i].fga;
                                break;
                            case 7:
                                // Tiros libres Intentados
                                jugador1Info[i].Data = estadisticas1.data[i].fta;
                                break;
                            case 8:
                                // Tiros de 3 Intentados
                                jugador1Info[i].Data = estadisticas1.data[i].fg3a;
                                break;
                            case 9:
                                // Tiros de campo Anotados
                                jugador1Info[i].Data = estadisticas1.data[i].fgm;
                                break;
                            case 10:
                                // Tiros libres Anotados
                                jugador1Info[i].Data = estadisticas1.data[i].ftm;
                                break;
                            case 11:
                                // Tiros de 3 Anotados
                                jugador1Info[i].Data = estadisticas1.data[i].fg3m;
                                break;
                            case 12:
                                // Faltas
                                jugador1Info[i].Data = estadisticas1.data[i].pf;
                                break;
                            case 13:
                                // Rebotes defensivos
                                jugador1Info[i].Data = estadisticas1.data[i].dreb;
                                break;
                            case 14:
                                // Rebotes ofensivos
                                jugador1Info[i].Data = estadisticas1.data[i].oreb;
                                break;

                        }
                    }

                }
            }
            else
            {
                int j;
                for (int i = 0; i < estadisticas1.data.Length; i++)
                {
                    j = i + 1;
                    jugador1Info[i].Partido = j;
                    switch (info)
                    {
                        case 1:
                            // Puntos
                            jugador1Info[i].Data = estadisticas1.data[i].pts;
                            break;
                        case 2:
                            // Asistencias
                            jugador1Info[i].Data = estadisticas1.data[i].ast;
                            break;
                        case 3:
                            // Rebotes
                            jugador1Info[i].Data = estadisticas1.data[i].reb;
                            break;
                        case 4:
                            // Robos
                            jugador1Info[i].Data = estadisticas1.data[i].stl;
                            break;
                        case 5:
                            // Tapones
                            jugador1Info[i].Data = estadisticas1.data[i].blk;
                            break;
                        case 6:
                            // Tiros de campo Intentados
                            jugador1Info[i].Data = estadisticas1.data[i].fga;
                            break;
                        case 7:
                            // Tiros libres Intentados
                            jugador1Info[i].Data = estadisticas1.data[i].fta;
                            break;
                        case 8:
                            // Tiros de 3 Intentados
                            jugador1Info[i].Data = estadisticas1.data[i].fg3a;
                            break;
                        case 9:
                            // Tiros de campo Anotados
                            jugador1Info[i].Data = estadisticas1.data[i].fgm;
                            break;
                        case 10:
                            // Tiros libres Anotados
                            jugador1Info[i].Data = estadisticas1.data[i].ftm;
                            break;
                        case 11:
                            // Tiros de 3 Anotados
                            jugador1Info[i].Data = estadisticas1.data[i].fg3m;
                            break;
                        case 12:
                            // Faltas
                            jugador1Info[i].Data = estadisticas1.data[i].pf;
                            break;
                        case 13:
                            // Rebotes defensivos
                            jugador1Info[i].Data = estadisticas1.data[i].dreb;
                            break;
                        case 14:
                            // Rebotes ofensivos
                            jugador1Info[i].Data = estadisticas1.data[i].oreb;
                            break;

                    }
                }
            }
        }
        

        estadisticas2 = await http.GetFromJsonAsync<Estadisticas>($"https://www.balldontlie.io/api/v1/stats?per_page=100&seasons[]=2022&player_ids[]={idJugador2}");
        @if (estadisticas2 == null || estadisticas2.data.Equals(statsVacia.data))
        {
            error2Datos = true;
            error2String = errores(2);
            elegido2 = false;

        }
        else
        {
            jugador2Info = new DataItem[estadisticas2.meta.total_count];
            inicializar(2);

            if (estadisticas2.meta.total_pages > 1)
            {
                for (int z = 1; z < estadisticas2.meta.total_pages; z++)
                {
                    if (z != 1)
                    {
                        estadisticas2 = await http.GetFromJsonAsync<Estadisticas>($"https://www.balldontlie.io/api/v1/stats?per_page=100&page={z}&seasons[]=2022&player_ids[]={idJugador2}");
                    }
                    int j;
                    for (int i = 0; i < estadisticas2.data.Length; i++)
                    {
                        j = (z * 100 - 100) + i + 1;
                        jugador2Info[i].Partido = j;
                        switch (info)
                        {
                            case 1:
                                // Puntos
                                jugador2Info[i].Data = estadisticas2.data[i].pts;
                                break;
                            case 2:
                                // Asistencias
                                jugador2Info[i].Data = estadisticas2.data[i].ast;
                                break;
                            case 3:
                                // Rebotes
                                jugador2Info[i].Data = estadisticas2.data[i].reb;
                                break;
                            case 4:
                                // Robos
                                jugador2Info[i].Data = estadisticas2.data[i].stl;
                                break;
                            case 5:
                                // Tapones
                                jugador2Info[i].Data = estadisticas2.data[i].blk;
                                break;
                            case 6:
                                // Tiros de campo Intentados
                                jugador2Info[i].Data = estadisticas2.data[i].fga;
                                break;
                            case 7:
                                // Tiros libres Intentados
                                jugador2Info[i].Data = estadisticas2.data[i].fta;
                                break;
                            case 8:
                                // Tiros de 3 Intentados
                                jugador2Info[i].Data = estadisticas2.data[i].fg3a;
                                break;
                            case 9:
                                // Tiros de campo Anotados
                                jugador2Info[i].Data = estadisticas2.data[i].fgm;
                                break;
                            case 10:
                                // Tiros libres Anotados
                                jugador2Info[i].Data = estadisticas2.data[i].ftm;
                                break;
                            case 11:
                                // Tiros de 3 Anotados
                                jugador2Info[i].Data = estadisticas2.data[i].fg3m;
                                break;
                            case 12:
                                // Faltas
                                jugador2Info[i].Data = estadisticas2.data[i].pf;
                                break;
                            case 13:
                                // Rebotes defensivos
                                jugador2Info[i].Data = estadisticas2.data[i].dreb;
                                break;
                            case 14:
                                // Rebotes ofensivos
                                jugador2Info[i].Data = estadisticas1.data[i].oreb;
                                break;
                        }
                    }

                }
            }
            else
            {
                int j;
                for (int i = 0; i < estadisticas2.data.Length; i++)
                {
                    j = i + 1;
                    jugador2Info[i].Partido = j;
                    switch (info)
                    {
                        case 1:
                            // Puntos
                            jugador2Info[i].Data = estadisticas2.data[i].pts;
                            break;
                        case 2:
                            // Asistencias
                            jugador2Info[i].Data = estadisticas2.data[i].ast;
                            break;
                        case 3:
                            // Rebotes
                            jugador2Info[i].Data = estadisticas2.data[i].reb;
                            break;
                        case 4:
                            // Robos
                            jugador2Info[i].Data = estadisticas2.data[i].stl;
                            break;
                        case 5:
                            // Tapones
                            jugador2Info[i].Data = estadisticas2.data[i].blk;
                            break;
                        case 6:
                            // Tiros de campo Intentados
                            jugador2Info[i].Data = estadisticas2.data[i].fga;
                            break;
                        case 7:
                            // Tiros libres Intentados
                            jugador2Info[i].Data = estadisticas2.data[i].fta;
                            break;
                        case 8:
                            // Tiros de 3 Intentados
                            jugador2Info[i].Data = estadisticas2.data[i].fg3a;
                            break;
                        case 9:
                            // Tiros de campo Anotados
                            jugador2Info[i].Data = estadisticas2.data[i].fgm;
                            break;
                        case 10:
                            // Tiros libres Anotados
                            jugador2Info[i].Data = estadisticas2.data[i].ftm;
                            break;
                        case 11:
                            // Tiros de 3 Anotados
                            jugador2Info[i].Data = estadisticas2.data[i].fg3m;
                            break;
                        case 12:
                            // Faltas
                            jugador2Info[i].Data = estadisticas2.data[i].pf;
                            break;
                        case 13:
                            // Rebotes defensivos
                            jugador2Info[i].Data = estadisticas2.data[i].dreb;
                            break;
                        case 14:
                            // Rebotes ofensivos
                            jugador2Info[i].Data = estadisticas1.data[i].oreb;
                            break;
                    }
                }
            }
        }

        @if (estadisticas1 == null || estadisticas1.data.Equals(statsVacia.data) || estadisticas2 == null || estadisticas2.data.Equals(statsVacia.data))
        {
            terminado = false;
        }
        else
        {
            terminado = true;
        }



    }

    private async Task getJugadores(int value1, int value2)
    {
        jugador1 = await http.GetFromJsonAsync<JugadorUnico>($"https://balldontlie.io/api/v1/players/{value1}");
        jugador2 = await http.GetFromJsonAsync<JugadorUnico>($"https://balldontlie.io/api/v1/players/{value2}");
    }

    private string getNombre(int i)
    {
        if (i == 1)
        {
            return jugador1.first_name + " " + jugador1.last_name;
        } else if (i == 2)
        {
            return jugador2.first_name + " " + jugador2.last_name;
        }
        return null;
    }

    private void inicializar(int z)
    {
        if (z == 1)
        {
            for (int i = 0; i < jugador1Info.Length; i++)
            {
                jugador1Info[i] = new DataItem
                    {
                        Partido = -1,
                        Data = -1
                    };
            }
        } else if (z == 2)
        {
            for (int i = 0; i < jugador2Info.Length; i++)
            {
                jugador2Info[i] = new DataItem
                    {
                        Partido = -1,
                        Data = -1
                    };
            }
        }
    }

    private string errores(int numero)
    {
        if (numero == 1)
        {
            // error 1
            return "El texto tiene que ser de dos letras o mas";
        } else if (numero == 2)
        {
            // error 2
            return "El jugador elegido no tiene datos";
        }
        return null;
    }

}
