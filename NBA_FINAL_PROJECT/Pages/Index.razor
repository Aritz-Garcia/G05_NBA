@page "/"
@using NBA_FINAL_PROJECT.Model
@using System.Net.Http
@using System.Text.Json.Serialization
@using System.Globalization
@inject HttpClient http
@inject NavigationManager navigation

<br/>
<div style="text-align:center">
    <img src="/img/logo/Logo_NBAS_3.gif" alt="logo NBAS" width="300"/>
</div>

<br/>
<br/>

@if (partidos != null && partidos.Count == 5)
{
    <h3>Ultimos Partidos:</h3>
    <br/>
    <MudCarousel Class="mud-width-full" Style="height:200px; border-radius:10px" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="false" 
            AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(10)" TData="PartidoUnico">

        @foreach (var item in partidos)
        {
            <MudCarouselItem Transition="Transition.Slide" Color="Color.Info" @onclick="(() => buscar(item.id))">
                <div style="text-align:center">
                    <br/>
                    <h3>@item.date</h3>
                    <div class="flexbox-estadisticas">
                        <RadzenImage Path="@getEqImg(item.visitor_team.abbreviation)" Style="width: 100px; height: 100px; border-radius: 50%;" />
                        @if (item.status.Contains("1st") || item.status.Contains("2nd") || item.status.Contains("Halftime") || item.status.Contains("3rd") || item.status.Contains("4th") || item.status.Contains("Final"))
                        {
                            <h4>@item.visitor_team_score</h4>
                            <h4>VS</h4>
                            <h4>@item.home_team_score</h4>
                        } else
                        {
                            <h4>VS</h4>
                        }
                        <RadzenImage Path="@getEqImg(item.home_team.abbreviation)" Style="width: 100px; height: 100px; border-radius: 50%;" />
                    </div>
                </div>
            </MudCarouselItem>
        }
        
    </MudCarousel>
} 
else
{
    <p><em>Loading...</em></p>
}

<br/>
    
@code {
    Partidos partidosDespues;
    Partidos partidosAntes;
    List<PartidoUnico> partidos = new List<PartidoUnico>();
    DateTime dateTimeHoy = DateTime.Now.Date;
    string hoy;
    string format = "yyyy-MM-ddTHH:mm:ss.fffZ";

    protected override async Task OnInitializedAsync()
    {
        hoy = dateTimeHoy.ToString("yyyy-MM-dd");
        partidosDespues = await http.GetFromJsonAsync<Partidos>($"https://www.balldontlie.io/api/v1/games?per_page=100&seasons[]=2022&start_date={hoy}");
        if (partidosDespues != null)
        {
            if (partidosDespues.meta.total_count >= 5)
            {
                for (int i = 0; i < partidosDespues.meta.total_count; i++)
                {
                    if (i < 5)
                    {
                        PartidoUnico partidoUnico = new PartidoUnico();
                        partidoUnico.home_team = new Home_Team1();
                        partidoUnico.visitor_team = new Visitor_Team1();

                        partidoUnico.id = partidosDespues.data[i].id;
                        partidoUnico.status = partidosDespues.data[i].status;
                        partidoUnico.date = DateTime.ParseExact(partidosDespues.data[i].date, format, CultureInfo.InvariantCulture);

                        partidoUnico.home_team.id = partidosDespues.data[i].home_team.id;
                        partidoUnico.home_team.name = partidosDespues.data[i].home_team.name;
                        partidoUnico.home_team.full_name = partidosDespues.data[i].home_team.full_name;
                        partidoUnico.home_team.abbreviation = partidosDespues.data[i].home_team.abbreviation;
                        partidoUnico.home_team_score = partidosDespues.data[i].home_team_score;

                        partidoUnico.visitor_team.id = partidosDespues.data[i].visitor_team.id;
                        partidoUnico.visitor_team.name = partidosDespues.data[i].visitor_team.name;
                        partidoUnico.visitor_team.full_name = partidosDespues.data[i].visitor_team.full_name;
                        partidoUnico.visitor_team.abbreviation = partidosDespues.data[i].visitor_team.abbreviation;
                        partidoUnico.visitor_team_score = partidosDespues.data[i].visitor_team_score;

                        partidos.Add(partidoUnico);
                    }
                }               
            } else if (partidosDespues.meta.total_count > 0)
            {
                foreach (var item in partidosDespues.data)
                {
                    PartidoUnico partidoUnico = new PartidoUnico();
                    partidoUnico.home_team = new Home_Team1();
                    partidoUnico.visitor_team = new Visitor_Team1();

                    partidoUnico.id = item.id;
                    partidoUnico.status = item.status;
                    partidoUnico.date = DateTime.ParseExact(item.date, format, CultureInfo.InvariantCulture);

                    partidoUnico.home_team.id = item.home_team.id;
                    partidoUnico.home_team.name = item.home_team.name;
                    partidoUnico.home_team.full_name = item.home_team.full_name;
                    partidoUnico.home_team.abbreviation = item.home_team.abbreviation;
                    partidoUnico.home_team_score = item.home_team_score;

                    partidoUnico.visitor_team.id = item.visitor_team.id;
                    partidoUnico.visitor_team.name = item.visitor_team.name;
                    partidoUnico.visitor_team.full_name = item.visitor_team.full_name;
                    partidoUnico.visitor_team.abbreviation = item.visitor_team.abbreviation;
                    partidoUnico.visitor_team_score = item.visitor_team_score;

                    partidos.Add(partidoUnico);
                }
            }
        }

        await consultaAntes();

        ordenar();

    }

    private async Task consultaAntes()
    {
        if (partidos.Count < 5)
        {
            partidosAntes = await http.GetFromJsonAsync<Partidos>($"https://www.balldontlie.io/api/v1/games?end_date={hoy}&per_page=100&seasons[]=2022");

            if (partidosAntes.meta.total_pages > 1)
            {
                int num = partidosAntes.meta.total_pages;
                partidosAntes = await http.GetFromJsonAsync<Partidos>($"https://www.balldontlie.io/api/v1/games?end_date={hoy}&page={num}&per_page=100&seasons[]=2022");

                for (int i = partidosAntes.data.Length - 1; partidos.Count < 5 && i >= 0; i--)
                {
                    PartidoUnico partidoUnico = new PartidoUnico();
                    partidoUnico.home_team = new Home_Team1();
                    partidoUnico.visitor_team = new Visitor_Team1();

                    partidoUnico.id = partidosAntes.data[i].id;
                    partidoUnico.status = partidosAntes.data[i].status;
                    partidoUnico.date = DateTime.ParseExact(partidosAntes.data[i].date, format, CultureInfo.InvariantCulture);

                    partidoUnico.home_team.id = partidosAntes.data[i].home_team.id;
                    partidoUnico.home_team.name = partidosAntes.data[i].home_team.name;
                    partidoUnico.home_team.full_name = partidosAntes.data[i].home_team.full_name;
                    partidoUnico.home_team.abbreviation = partidosAntes.data[i].home_team.abbreviation;
                    partidoUnico.home_team_score = partidosAntes.data[i].home_team_score;

                    partidoUnico.visitor_team.id = partidosAntes.data[i].visitor_team.id;
                    partidoUnico.visitor_team.name = partidosAntes.data[i].visitor_team.name;
                    partidoUnico.visitor_team.full_name = partidosAntes.data[i].visitor_team.full_name;
                    partidoUnico.visitor_team.abbreviation = partidosAntes.data[i].visitor_team.abbreviation;
                    partidoUnico.visitor_team_score = partidosAntes.data[i].visitor_team_score;

                    partidos.Add(partidoUnico);
                }

                if (partidos.Count < 5)
                {
                    num = num - 1;
                    partidosAntes = await http.GetFromJsonAsync<Partidos>($"https://www.balldontlie.io/api/v1/games?end_date={hoy}&page={num}&per_page=100&seasons[]=2022");
                    for (int i = partidosAntes.data.Length - 1; partidos.Count < 5 && i > 0; i--)
                    {
                        PartidoUnico partidoUnico = new PartidoUnico();
                        partidoUnico.home_team = new Home_Team1();
                        partidoUnico.visitor_team = new Visitor_Team1();

                        partidoUnico.id = partidosAntes.data[i].id;
                        partidoUnico.status = partidosAntes.data[i].status;
                        partidoUnico.date = DateTime.ParseExact(partidosAntes.data[i].date, format, CultureInfo.InvariantCulture);

                        partidoUnico.home_team.id = partidosAntes.data[i].home_team.id;
                        partidoUnico.home_team.name = partidosAntes.data[i].home_team.name;
                        partidoUnico.home_team.full_name = partidosAntes.data[i].home_team.full_name;
                        partidoUnico.home_team.abbreviation = partidosAntes.data[i].home_team.abbreviation;
                        partidoUnico.home_team_score = partidosAntes.data[i].home_team_score;

                        partidoUnico.visitor_team.id = partidosAntes.data[i].visitor_team.id;
                        partidoUnico.visitor_team.name = partidosAntes.data[i].visitor_team.name;
                        partidoUnico.visitor_team.full_name = partidosAntes.data[i].visitor_team.full_name;
                        partidoUnico.visitor_team.abbreviation = partidosAntes.data[i].visitor_team.abbreviation;
                        partidoUnico.visitor_team_score = partidosAntes.data[i].visitor_team_score;

                        partidos.Add(partidoUnico);
                    }
                }
            }
        }
    }

    private void ordenar()
    {
        partidos = partidos.OrderBy(x => x.date).ToList();
    }

    private string getEqImg(string abbreviation)
    {
        return "/img/equipos/" + abbreviation + ".png";
    }

    private void buscar(int id)
    {
        navigation.NavigateTo($"/partidoInfo/{id}");
    }

}
